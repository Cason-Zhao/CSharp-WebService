//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebService.Client.TestWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestWebService.TestWebServiceSoap")]
    public interface TestWebServiceSoap {
        
        // CODEGEN: 消息 HelloWebServiceRequest 以后生成的消息协定具有标头
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WebService.Client.TestWebService.HelloWebServiceResponse HelloWebService(WebService.Client.TestWebService.HelloWebServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/HelloWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<WebService.Client.TestWebService.HelloWebServiceResponse> HelloWebServiceAsync(WebService.Client.TestWebService.HelloWebServiceRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TestWebServiceSoapHeader : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string tokenField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
                this.RaisePropertyChanged("Token");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
                this.RaisePropertyChanged("AnyAttr");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HelloWebService", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class HelloWebServiceRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader;
        
        public HelloWebServiceRequest() {
        }
        
        public HelloWebServiceRequest(WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader) {
            this.TestWebServiceSoapHeader = TestWebServiceSoapHeader;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="HelloWebServiceResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class HelloWebServiceResponse {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string HelloWebServiceResult;
        
        public HelloWebServiceResponse() {
        }
        
        public HelloWebServiceResponse(WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader, string HelloWebServiceResult) {
            this.TestWebServiceSoapHeader = TestWebServiceSoapHeader;
            this.HelloWebServiceResult = HelloWebServiceResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TestWebServiceSoapChannel : WebService.Client.TestWebService.TestWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestWebServiceSoapClient : System.ServiceModel.ClientBase<WebService.Client.TestWebService.TestWebServiceSoap>, WebService.Client.TestWebService.TestWebServiceSoap {
        
        public TestWebServiceSoapClient() {
        }
        
        public TestWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WebService.Client.TestWebService.HelloWebServiceResponse WebService.Client.TestWebService.TestWebServiceSoap.HelloWebService(WebService.Client.TestWebService.HelloWebServiceRequest request) {
            return base.Channel.HelloWebService(request);
        }
        
        public string HelloWebService(ref WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader) {
            WebService.Client.TestWebService.HelloWebServiceRequest inValue = new WebService.Client.TestWebService.HelloWebServiceRequest();
            inValue.TestWebServiceSoapHeader = TestWebServiceSoapHeader;
            WebService.Client.TestWebService.HelloWebServiceResponse retVal = ((WebService.Client.TestWebService.TestWebServiceSoap)(this)).HelloWebService(inValue);
            TestWebServiceSoapHeader = retVal.TestWebServiceSoapHeader;
            return retVal.HelloWebServiceResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WebService.Client.TestWebService.HelloWebServiceResponse> WebService.Client.TestWebService.TestWebServiceSoap.HelloWebServiceAsync(WebService.Client.TestWebService.HelloWebServiceRequest request) {
            return base.Channel.HelloWebServiceAsync(request);
        }
        
        public System.Threading.Tasks.Task<WebService.Client.TestWebService.HelloWebServiceResponse> HelloWebServiceAsync(WebService.Client.TestWebService.TestWebServiceSoapHeader TestWebServiceSoapHeader) {
            WebService.Client.TestWebService.HelloWebServiceRequest inValue = new WebService.Client.TestWebService.HelloWebServiceRequest();
            inValue.TestWebServiceSoapHeader = TestWebServiceSoapHeader;
            return ((WebService.Client.TestWebService.TestWebServiceSoap)(this)).HelloWebServiceAsync(inValue);
        }
    }
}
